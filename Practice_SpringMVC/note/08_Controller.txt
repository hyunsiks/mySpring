08_Controller.txt

# 스프링 컨트롤러
	- JSP의 복잡한 절차들을 많이 생략한 방식으로 웹서버를 구현할 수 있게되었다
	  (생략된것: 포워드, request에서 파라미터 꺼내기 등등..)
	- 다양한 방식의 매개변수와 리턴 타입을 사용할 수 있다
	- GET/ POST 등 메소드 별로 별도의 처리도 어노테이션으로 쉽게 처리 가능
	- 클래스 위에 @Controller 어노테이션을 달아놓으면 스프링이 알아서 수집해간다(수집된것들은 Dispatcher서블릿 쪽에 등록되어있을것)
	
 @RequestMapping
 	- 사용자의 요청 URL과 해당 컨트롤러를 매핑시키는 어노테이션
 	- 클래스 위에도 사용할 수 있고 메서드 위에도 사용할 수 있다
 	  (클래스와 메서드 모두있으면 클래스위의 주소와 메서드위의 주소를 합치게된다)
 	- value : 매핑할 URL을 설정한다
 	- method : 요청방식을 구분할 수 있다
 	- @GetMapping, @PostMapping 등으로 메서드 선택을 간편화할수도 있다
 	
# 컨트롤러의 파라미터 자동 수집 기능
	- JSP의 request.getParameter를 할 필요가 없어진다
	- 넘어오는 데이터와 알맞은 형태의 자바빈 클래스를 사용하게 된다
	- 컨트롤러의 매개변수 이름만 같아도 데이터가 알아서 매개변수로 전달된다

# Model 타입 파라미터
	- Spring에서는 각 영역 대신 Model에 어트리뷰트를 실어서 전달한다
	- 컨트롤러의 매개변수에 Model타입 변수를 설정해 놓으면 알아서 Model인스턴스가 넘어오게 된다
	- 자바빈 클래스를 사용한 파라미터는 자동으로 Model 어트리뷰트에 실려 뷰까지 전달된다
	- 기본 타입 파라미터는 자동으로 전달되지는 않지만 @ModelAttribute 어노테이션을 통해 자동으로 전달할 수 있다
	
# 컨트롤러의 리턴 타입
  1. 뷰를 찾는 타입
	※DispatcherServlet은 컨트롤러의 리턴값을 통해 알맞은 view를 찾게끔 만들어져있다
	- void : 요청하는 URL과 동일한 경로를 가진 view를 찾는다.(/WEB-INF/views/ 밑에서)
	- String : 리턴한 문자열 경로로 view를 찾는다(/WEB-INF/views/ 밑에서)
			   문자열 리턴값 앞에 redirect: 을 붙이면 리다이렉트한다.
	- ModelAndView : 데이터도 실어놓을 수 있고 다음으로 가야하는 view가 어딘지도 담고있다.
	
  2. 뷰를 응답하지 않고 웹 페이지 이외의 것을 응답하는 타입
  	- 자바빈 객체 타입 : 요청한 사용자에게 데이터를 생성하여 전달한다.(주로 JSON타입)
	- Model 타입 : 요청한 사용자에게 모델에 들어있는 데이터를 응답한다
	- ResponseEntity : 직접 원하는 타입의 응답을 생성할 수 있는 클래스(httpprotocol의 헤더, 바디 등의 내용을 변경하여 보낼수있다)
	
	
	
	
	
	
	
	
	